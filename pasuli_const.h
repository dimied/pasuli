#ifndef __PARAMETRIC_SURFACE_CONSTANTS__
#define __PARAMETRIC_SURFACE_CONSTANTS__

#include "pasuli_cfg.h"
//#include "pasuli_defs.h"
#include "pasuli_approx.h"

#include "cylinder/cylinder.h"

#include "fruits/fruits.h"

#include "shells/shells.h"

#include "sphere/sphere.h"

#include "spiral/spiral.h"

#include "torus/torus.h"

#include "surfaces/surfaces.h"

#if (PASULI_DEBUG_MODE != 0)

#define PASULI_SET_NAME(TEXT, _ID) \
	{                              \
		TEXT, _ID                  \
	}
#define PASULI_NAME_CHAR_PTR(X) ((char *)X.szName)
#else
typedef char *pasuli_name_type;
#define PASULI_SET_NAME(TEXT, _ID) TEXT
#define PASULI_NAME_CHAR_PTR(X) ((char *)X)
#endif

enum PaSuLiInfo
{
	PASULI_INFO_FUNC_PTR = 0,
	PASULI_INFO_DEF_DESC_PTR,
	PASULI_INFO_DESC_PTR,
	PASULI_INFO_NAME_PTR
};

void *getPaSuLiPointer(unsigned int uiSurfaceType, unsigned int uiInfo);

#define PASULI_CAT_SURFACES 0
#define PASULI_CAT_CYLINDER 1
#define PASULI_CAT_FRUITS 2
#define PASULI_CAT_SHELLS 3
#define PASULI_CAT_SPHERE 4
#define PASULI_CAT_SPIRAL 5
#define PASULI_CAT_TORUS 6
#define PASULI_CAT_INVALID_TYPE 7
#define PASULI_CATEGORY_COUNT 7

typedef unsigned char pasuli_funcnum_range_type;
typedef unsigned char pasuli_avail_info_type;
extern pasuli_funcnum_range_type pasuli_cat_func_ranges[PASULI_CATEGORY_COUNT];
extern pasuli_avail_info_type availablePaSuLiInfo[PASULI_CATEGORY_COUNT];

//These constants define unique IDs for surfaces/surface types
enum SurfaceType
{
	NOT_VALID_SURFACE_TYPE = 0,
	PLANE = 1
	// General surfaces
	,
	BOHEMIAN_DOME_SURFACE,
	PASULI_CAT_SURFACES_FIRST = BOHEMIAN_DOME_SURFACE,
	BOYS_SURFACE,
	CROSS_CUP,
	DINI_SURFACE,
	ENNEPER_SURFACE,
	HANDKERCHIEF,
	KLEIN_BOTTLE_SURFACE,
	MOEBIUS_BAND,
	MOEBIUS_BAND2,
	MONKEY_SADDLE,
	PLUECKER_CONOID,
	ROMAN_SURFACE,
	SHOE_SURFACE,
	SINE_SURFACE,
	STEINBACH_SCREW,
	WHITNEY_UMBRELLA,
	CATENOID,
	HELICOID,
	PARABOLOID,
	HYPERBOLIC_HELICOID,
	FUNNEL,
	TRACTROID,
	CATALANS_SURFACE,
	HYPERBOLOID,
	HENNEBERGS_SURFACE,
	SWALLOW_SURFACE,
	WALLIS_CONICAL_SURFACE,
	MAEDERS_OWL,
	RICHMOND_SURFACE,
	SCHERK_SURFACE,
	COSINE_SURFACE,
	EIGHT_SURFACE,
	JET_SURFACE,
	DROP,
	TRIAXIAL_TEARDROP,
	PILLOW_SHAPE,
	FISH_SURFACE,
	HORN,
	BENT_HORNS,
	HYPERBOLIC_OCTAHEDRON,
	PSEUDO_CROSS_CAP,
	CRESENT,
	STILETTO_SURFACE,
	KUENS_SURFACE,
	TREFOIL_KNOTS,
	TRANGULOID_TREFOIL,
	CROWN,
	TWISTED_PIPE_SURFACE,
	LOOP,
	DUPIN_CYCLIDE,
	GUIMARD_SURFACE,
	MENNS_SURFACE,
	MILK_BAG,
	TRIAXIAL_TRITORUS,
	VERRILL_SURFACE,
	ZINDLERS_CONOID,
	FOLIUM,
	LEMNISCAPE,
	TRIPLE_POINT_TWIST,
	TRASHCAN,
	SPRING1,
	SPRING2,
	CONE,
	EGG,
	ISOLATOR,
	HYPERBOLIC_PARABOLOID,
	DROP_SURFACE,
	FACING_SNAIL,
	PAPER_BAG,
	JEENER_KLEIN_SURFACE,
	BONAN_JEENER_KLEIN_SURFACE,
	KLEIN_CYCLOID,
	DOUBLE_CONE,
	HOLE_DISC,
	PISOT_TRIAXIAL,
	TRIAXIAL_HEXATORUS,
	TWISTED_HEART,
	HOLE_DISCUS,
	DISC,
	WAVES,
	SINE_WAVE,
	COSINE_WAVE,
	SPIRAL_WAVE,
	BELL,
	BELL_POLAR,
	BELL_WAVE,
	SOUCOUPOID,
	ENNEPER_SURFACE_POLAR,
	SINE_CONE,
	SPINNER,
	FRESNEL,
	TREFOIL_KNOTS2,
	BOW_CURVE,
	TRIPLE_CORK_SCREW1,
	TRIPLE_CORK_SCREW2,
	TRIPLE_CORK_SCREW3,
	BICORN_SURFACE,
	PIRIFORM_SURFACE,
	KAPPA_SURFACE,
	BULLET_NOSE,
	SIEVERT_SURFACE,
	COSINE_SURFACE2,
	PASULI_CAT_SURFACES_LAST = COSINE_SURFACE2

	// Cylinder
	,
	CYLINDER,
	PASULI_CAT_CYLINDER_FIRST = CYLINDER,
	EPIZYKLOID_CYLINDER,
	HYPOZYKLOID_CYLINDER,
	LEMNISKATE_CYLINDER,
	STROPHOIDE_CYLINDER,
	ZISSOIDE_CYLINDER,
	VERSIERA_AGNESI_CYLINDER,
	GAUSS_CYLINDER,
	PASULI_CAT_CYLINDER_LAST = GAUSS_CYLINDER
	//Fruits
	,
	KIDNEY_SURFACE,
	PASULI_CAT_FRUIT_FIRST = KIDNEY_SURFACE,
	APPLE_SURFACE,
	APPLE2_SURFACE,
	LEMON_SURFACE,
	PASULI_CAT_FRUIT_LAST = LEMON_SURFACE
	// Shells & snails
	,
	CORNUCOPIA,
	PASULI_CAT_SHELL_FIRST = CORNUCOPIA,
	SNAIL,
	SEASHELL,
	SNAIL_SURFACE,
	SNAILS,
	PSEUDOHELICERAS_SUBCATENATUM,
	ASTROCERAS,
	BELLEROPHINA,
	EUHOPLITES,
	NAUTILUS,
	NATICA_STELLATA,
	MYA_ARENARIA,
	PASULI_CAT_SHELL_LAST = MYA_ARENARIA
	// Spheres
	,
	SPHERE,
	PASULI_CAT_SPHERE_FIRST = SPHERE,
	ELLIPSOID,
	SPHERE_V,
	SPHERE_UV,
	PSEUDOSPHERE,
	TWISTED_SPHERE,
	OPEN_SPHERE,
	WAVE_SPHERE,
	PASULI_CAT_SPHERE_LAST = WAVE_SPHERE
	// Spirals
	,
	ARCHIMEDIC_SPIRAL,
	PASULI_CAT_SPIRAL_FIRST = ARCHIMEDIC_SPIRAL,
	HYPERBOLIC_SPIRAL,
	FERMAT_SPIRAL,
	TANH_SPIRAL,
	LOG_SPIRAL,
	PASULI_CAT_SPIRAL_LAST = LOG_SPIRAL
	// Torus
	,
	TORUS,
	PASULI_CAT_TORUS_FIRST = TORUS,
	EIGHT_TORUS,
	ELLIPTIC_TORUS,
	SADDLE_TORUS,
	ANTISYMMETRIC_TORUS,
	TWISTED_EIGHT_TORUS,
	UMBILLIC_TORUS,
	WAVE_TORUS,
	BRAIDED_TORUS,
	LIMPET_TORUS,
	STRANGLED_TORUS,
	ASTROID_TORUS,
	TRICUSPOID_TORUS_1,
	TRICUSPOID_TORUS_2,
	NEPHROID_TORUS_1,
	NEPHROID_TORUS_2,
	LEMNISKATE_TORUS_1,
	LEMNISKATE_TORUS_2,
	EPIZYKLOID_TORUS_1,
	EPIZYKLOID_TORUS_2,
	HYPOZYKLOID_TORUS_1,
	HYPOZYKLOID_TORUS_2,
	PIRIFORM_TORUS_1,
	PIRIFORM_TORUS_2,
	BICORN_TORUS_1,
	BICORN_TORUS_2,
	CARDIOID_TORUS_1,
	CARDIOID_TORUS_2,
	CASSINIAN_OVAL_TORUS_1,
	CASSINIAN_OVAL_TORUS_2,
	GERONO_LEMNISKATE_TORUS_1,
	GERONO_LEMNISKATE_TORUS_2,
	CURLY_TORUS_1,
	CURLY_TORUS_2,
	SPIRAL_TORUS,
	TORUS_KNOT,
	GEAR_TORUS,
	PASULI_CAT_TORUS_LAST = GEAR_TORUS,
	NUMB_OF_SURFACES
};

#define PASULI_CAT_SURFACES_COUNT \
	(PASULI_CAT_SURFACES_LAST - PASULI_CAT_SURFACES_FIRST)
#define PASULI_CAT_CYLINDER_COUNT \
	(PASULI_CAT_CYLINDER_LAST - PASULI_CAT_CYLINDER_FIRST)
#define PASULI_CAT_FRUIT_COUNT \
	(PASULI_CAT_FRUIT_LAST - PASULI_CAT_FRUIT_FIRST)
#define PASULI_CAT_SHELL_COUNT \
	(PASULI_CAT_SHELL_LAST - PASULI_CAT_SHELL_FIRST)
#define PASULI_CAT_SPHERE_COUNT \
	(PASULI_CAT_SPHERE_LAST - PASULI_CAT_SPHERE_FIRST)
#define PASULI_CAT_SPIRAL_COUNT \
	(PASULI_CAT_SPIRAL_LAST - PASULI_CAT_SPIRAL_FIRST)
#define PASULI_CAT_TORUS_COUNT \
	(PASULI_CAT_TORUS_LAST - PASULI_CAT_TORUS_FIRST)

#define PASULI_MAX_INFO_DESCRIPTIONS 4

#define PASULI_SET_AVAILABLE(PSL_FUNC, PSL_DEFDESC, PSL_DESC, PSL_NAME) \
	((PSL_FUNC) | (PSL_DEFDESC << 1) | (PSL_DESC << 2) | (PSL_NAME << 3))

#define PASULI_GET_AVAILABLE(X, OFFSET) (X & (0x1 << OFFSET))

#define PASULI_IS_FUNC_PART_AVAILABLE(X) (X & (0x1))
#define PASULI_IS_DEFDESC_PART_AVAILABLE(X) (X & (0x1 << 1))
#define PASULI_IS_DESC_PART_AVAILABLE(X) (X & (0x1 << 2))
#define PASULI_IS_NAME_PART_AVAILABLE(X) (X & (0x1 << 3))

#endif
