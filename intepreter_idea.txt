Kleinen Interpreter schreiben.
Byte pro Befehl

Nibble pro Befehl
Nibble pro Operand (registers)

Ergebnis im Accumulator:

0: start or end
1: save accum into reg
2: load into accum from reg
3: switch command palette, i.e. you can have upto 16 palettes each 12 commands

4: add to accum
5: sub from accum
6: mul with accum, save to accum
7: divide accum by reg, sato accum

8: exponentiate by reg,
9: cos of reg
10: sin of reg
11: negate accum

12:
13:
14:
15:

Special:
0 + 0: start setup
only first 3 bits for command

001 + operand: load push constant from global constant array (64 = 2^6)
010 + operand: load #operand number of parameters into first regs
  e.g. 1000 0003 => load 3 parameters into regX till regX+2
011: set param regs
100: set result regs

0 + 0: end setup

0 + x: x > 0 means start/end program x


Example:
Sphere:

r*sin(theta)*cos(phi)
r*sin(theta)*sin(phi)
r*cos(theta)

Godbold says 104 bytes

reg1 = r
reg2 = theta
reg3 = phi

reg4 = rsin
reg5 = x
reg6 = y
reg7 = z

sin theta (reg2)  => accum
mul by r (reg1) => accum
save accum to rsin (reg4)

cos phi ( reg3) => accum
mul by rsin (reg4) => accum
save to x (reg5)

sin phi (reg3) => accum
mul by rsin (reg4) => accum
save to y (reg6)

cos theta (reg2) => accum
mul by r (reg1) => accum
save to z (reg7)

=> 12 bytes

2 loops => progs



for-loop by u:
 - exec for u temp calcs
 for-loop by v
  - exec for v calcs
  - save results



















